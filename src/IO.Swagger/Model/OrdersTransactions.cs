/* 
 * LIO - Order Management API
 *
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OrdersTransactions
    /// </summary>
    [DataContract]
    public partial class OrdersTransactions :  IEquatable<OrdersTransactions>, IValidatableObject
    {
        /// <summary>
        /// Tipo da transação.
        /// </summary>
        /// <value>Tipo da transação.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            
            /// <summary>
            /// Enum PAYMENT for "PAYMENT"
            /// </summary>
            [EnumMember(Value = "PAYMENT")]
            PAYMENT,
            
            /// <summary>
            /// Enum CANCELLATION for "CANCELLATION"
            /// </summary>
            [EnumMember(Value = "CANCELLATION")]
            CANCELLATION
        }

        /// <summary>
        /// Status da transação.
        /// </summary>
        /// <value>Status da transação.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CONFIRMED for "CONFIRMED"
            /// </summary>
            [EnumMember(Value = "CONFIRMED")]
            CONFIRMED,
            
            /// <summary>
            /// Enum PENDING for "PENDING"
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING,
            
            /// <summary>
            /// Enum CANCELLED for "CANCELLED"
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED
        }

        /// <summary>
        /// Tipo da transação.
        /// </summary>
        /// <value>Tipo da transação.</value>
        [DataMember(Name="transaction_type", EmitDefaultValue=false)]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// Status da transação.
        /// </summary>
        /// <value>Status da transação.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersTransactions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrdersTransactions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersTransactions" /> class.
        /// </summary>
        /// <param name="Id">UUID que identifica unicamente a transação. (required).</param>
        /// <param name="TransactionType">Tipo da transação. (required).</param>
        /// <param name="Status">Status da transação. (required).</param>
        /// <param name="Description">Descrição da transação..</param>
        /// <param name="TerminalNumber">Número do terminal da Cielo Lio em que o pagamento foi realizado. (required).</param>
        /// <param name="Card">Card.</param>
        /// <param name="Number">Número Sequencial Único (NSU) da transação. (required).</param>
        /// <param name="AuthorizationCode">Código de autorização da transação. (required).</param>
        /// <param name="PaymentProduct">PaymentProduct.</param>
        /// <param name="Amount">Valor da transação. Exemplo: O valor de R$ 10,00 é representado como 1000. (required).</param>
        /// <param name="CreatedAt">Data da criação/inclusão do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z) (required).</param>
        /// <param name="UpdatedAt">Data da última atualização do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z) (required).</param>
        public OrdersTransactions(string Id = default(string), TransactionTypeEnum? TransactionType = default(TransactionTypeEnum?), StatusEnum? Status = default(StatusEnum?), string Description = default(string), int? TerminalNumber = default(int?), OrdersCard Card = default(OrdersCard), int? Number = default(int?), string AuthorizationCode = default(string), OrdersPaymentProduct PaymentProduct = default(OrdersPaymentProduct), string Amount = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "TransactionType" is required (not null)
            if (TransactionType == null)
            {
                throw new InvalidDataException("TransactionType is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.TransactionType = TransactionType;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "TerminalNumber" is required (not null)
            if (TerminalNumber == null)
            {
                throw new InvalidDataException("TerminalNumber is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.TerminalNumber = TerminalNumber;
            }
            // to ensure "Number" is required (not null)
            if (Number == null)
            {
                throw new InvalidDataException("Number is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.Number = Number;
            }
            // to ensure "AuthorizationCode" is required (not null)
            if (AuthorizationCode == null)
            {
                throw new InvalidDataException("AuthorizationCode is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.AuthorizationCode = AuthorizationCode;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "CreatedAt" is required (not null)
            if (CreatedAt == null)
            {
                throw new InvalidDataException("CreatedAt is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.CreatedAt = CreatedAt;
            }
            // to ensure "UpdatedAt" is required (not null)
            if (UpdatedAt == null)
            {
                throw new InvalidDataException("UpdatedAt is a required property for OrdersTransactions and cannot be null");
            }
            else
            {
                this.UpdatedAt = UpdatedAt;
            }
            this.Description = Description;
            this.Card = Card;
            this.PaymentProduct = PaymentProduct;
        }
        
        /// <summary>
        /// UUID que identifica unicamente a transação.
        /// </summary>
        /// <value>UUID que identifica unicamente a transação.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }



        /// <summary>
        /// Descrição da transação.
        /// </summary>
        /// <value>Descrição da transação.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Número do terminal da Cielo Lio em que o pagamento foi realizado.
        /// </summary>
        /// <value>Número do terminal da Cielo Lio em que o pagamento foi realizado.</value>
        [DataMember(Name="terminal_number", EmitDefaultValue=false)]
        public int? TerminalNumber { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public OrdersCard Card { get; set; }

        /// <summary>
        /// Número Sequencial Único (NSU) da transação.
        /// </summary>
        /// <value>Número Sequencial Único (NSU) da transação.</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Código de autorização da transação.
        /// </summary>
        /// <value>Código de autorização da transação.</value>
        [DataMember(Name="authorization_code", EmitDefaultValue=false)]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProduct
        /// </summary>
        [DataMember(Name="payment_product", EmitDefaultValue=false)]
        public OrdersPaymentProduct PaymentProduct { get; set; }

        /// <summary>
        /// Valor da transação. Exemplo: O valor de R$ 10,00 é representado como 1000.
        /// </summary>
        /// <value>Valor da transação. Exemplo: O valor de R$ 10,00 é representado como 1000.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Data da criação/inclusão do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)
        /// </summary>
        /// <value>Data da criação/inclusão do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Data da última atualização do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)
        /// </summary>
        /// <value>Data da última atualização do item no pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersTransactions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TerminalNumber: ").Append(TerminalNumber).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  AuthorizationCode: ").Append(AuthorizationCode).Append("\n");
            sb.Append("  PaymentProduct: ").Append(PaymentProduct).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrdersTransactions);
        }

        /// <summary>
        /// Returns true if OrdersTransactions instances are equal
        /// </summary>
        /// <param name="other">Instance of OrdersTransactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersTransactions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TransactionType == other.TransactionType ||
                    this.TransactionType != null &&
                    this.TransactionType.Equals(other.TransactionType)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.TerminalNumber == other.TerminalNumber ||
                    this.TerminalNumber != null &&
                    this.TerminalNumber.Equals(other.TerminalNumber)
                ) && 
                (
                    this.Card == other.Card ||
                    this.Card != null &&
                    this.Card.Equals(other.Card)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.AuthorizationCode == other.AuthorizationCode ||
                    this.AuthorizationCode != null &&
                    this.AuthorizationCode.Equals(other.AuthorizationCode)
                ) && 
                (
                    this.PaymentProduct == other.PaymentProduct ||
                    this.PaymentProduct != null &&
                    this.PaymentProduct.Equals(other.PaymentProduct)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TransactionType != null)
                    hash = hash * 59 + this.TransactionType.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.TerminalNumber != null)
                    hash = hash * 59 + this.TerminalNumber.GetHashCode();
                if (this.Card != null)
                    hash = hash * 59 + this.Card.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.AuthorizationCode != null)
                    hash = hash * 59 + this.AuthorizationCode.GetHashCode();
                if (this.PaymentProduct != null)
                    hash = hash * 59 + this.PaymentProduct.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
