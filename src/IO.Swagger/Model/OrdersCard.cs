/* 
 * LIO - Order Management API
 *
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Informações sobre o cartão utilizado na transação.
    /// </summary>
    [DataContract]
    public partial class OrdersCard : IEquatable<OrdersCard>, IValidatableObject
    {
        /// <summary>
        /// Bandeira do cartão.
        /// </summary>
        /// <value>Bandeira do cartão.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BrandEnum
        {

            /// <summary>
            /// Enum VISA for "VISA"
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISA,

            /// <summary>
            /// Enum MASTERCARD for "MASTERCARD"
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARD,

            /// <summary>
            /// Enum ELO for "ELO"
            /// </summary>
            [EnumMember(Value = "ELO")]
            ELO,

            /// <summary>
            /// Enum DINERS for "DINERS"
            /// </summary>
            [EnumMember(Value = "DINERS")]
            DINERS,

            /// <summary>
            /// Enum AMEX for "AMEX"
            /// </summary>
            [EnumMember(Value = "AMEX")]
            AMEX,

            /// <summary>
            /// Enum AURA for "AURA"
            /// </summary>
            [EnumMember(Value = "AURA")]
            AURA
        }

        /// <summary>
        /// Bandeira do cartão.
        /// </summary>
        /// <value>Bandeira do cartão.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public BrandEnum? Brand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrdersCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersCard" /> class.
        /// </summary>
        /// <param name="Brand">Bandeira do cartão. (required).</param>
        /// <param name="Bin">Bin (primeiros 6 dígitos) do cartão. (required).</param>
        /// <param name="Last">Last (últimos 4 dígitos) do cartão. (required).</param>
        public OrdersCard(BrandEnum? Brand = default(BrandEnum?), int? Bin = default(int?), int? Last = default(int?), string Mask = default(string))
        {
            // to ensure "Brand" is required (not null)
            if (Brand == null)
            {
                throw new InvalidDataException("Brand is a required property for OrdersCard and cannot be null");
            }
            else
            {
                this.Brand = Brand;
            }
            // to ensure "Bin" is required (not null)
            if (Bin == null)
            {
                throw new InvalidDataException("Bin is a required property for OrdersCard and cannot be null");
            }
            else
            {
                this.Bin = Bin;
            }
            // to ensure "Last" is required (not null)
            if (Last == null)
            {
                throw new InvalidDataException("Last is a required property for OrdersCard and cannot be null");
            }
            else
            {
                this.Last = Last;
            }

            this.Mask = Mask;
        }


        /// <summary>
        /// Bin (primeiros 6 dígitos) do cartão.
        /// </summary>
        /// <value>Bin (primeiros 6 dígitos) do cartão.</value>
        [DataMember(Name = "bin", EmitDefaultValue = false)]
        public int? Bin { get; set; }

        /// <summary>
        /// Last (últimos 4 dígitos) do cartão.
        /// </summary>
        /// <value>Last (últimos 4 dígitos) do cartão.</value>
        [DataMember(Name = "last", EmitDefaultValue = false)]
        public int? Last { get; set; }

        /// <summary>
        /// Mask cartão trancate.
        /// </summary>
        /// <value>Mask cartão trancate.</value>
        [DataMember(Name = "Mask", EmitDefaultValue = false)]        
        public string Mask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersCard {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrdersCard);
        }

        /// <summary>
        /// Returns true if OrdersCard instances are equal
        /// </summary>
        /// <param name="other">Instance of OrdersCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersCard other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Brand == other.Brand ||
                    this.Brand != null &&
                    this.Brand.Equals(other.Brand)
                ) &&
                (
                    this.Bin == other.Bin ||
                    this.Bin != null &&
                    this.Bin.Equals(other.Bin)
                ) &&
                (
                    this.Last == other.Last ||
                    this.Last != null &&
                    this.Last.Equals(other.Last)
                ) &&
                (
                    this.Mask == other.Mask ||
                    this.Mask != null &&
                    this.Mask.Equals(other.Mask)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Brand != null)
                    hash = hash * 59 + this.Brand.GetHashCode();
                if (this.Bin != null)
                    hash = hash * 59 + this.Bin.GetHashCode();
                if (this.Last != null)
                    hash = hash * 59 + this.Last.GetHashCode();
                if (this.Mask != null)
                    hash = hash * 59 + this.Mask.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
