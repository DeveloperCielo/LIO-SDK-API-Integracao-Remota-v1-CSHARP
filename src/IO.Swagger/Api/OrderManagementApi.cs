/* 
 * LIO - Order Management API
 *
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Response</returns>
        Response OrderAddItem (string clientId, string accessToken, string merchantId, string id, OrderItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> OrderAddItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id, OrderItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a criação de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>Response</returns>
        Response OrderCreate (string clientId, string accessToken, string merchantId, Order body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a criação de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> OrderCreateWithHttpInfo (string clientId, string accessToken, string merchantId, Order body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns></returns>
        void OrderDelete (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrderDeleteWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>Response</returns>
        Response OrderDeleteItem (string clientId, string accessToken, string merchantId, string id, string itemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> OrderDeleteItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Order</returns>
        Order OrderGet (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrderGetWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns></returns>
        void OrderGetByParameters (string clientId, string accessToken, string merchantId, string parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrderGetByParametersWithHttpInfo (string clientId, string accessToken, string merchantId, string parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>OrderItem</returns>
        OrderItem OrderGetItem (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of OrderItem</returns>
        ApiResponse<OrderItem> OrderGetItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Transaction</returns>
        Transaction OrderGetTransactions (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> OrderGetTransactionsWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar o cancelamento de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns></returns>
        void OrderUpdate (string clientId, string accessToken, string merchantId, string id, string operation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar o cancelamento de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OrderUpdateWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string operation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Response</returns>
        Response OrderUpdateItem (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> OrderUpdateItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> OrderAddItemAsync (string clientId, string accessToken, string merchantId, string id, OrderItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> OrderAddItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, OrderItem body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a criação de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> OrderCreateAsync (string clientId, string accessToken, string merchantId, Order body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a criação de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> OrderCreateAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, Order body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrderDeleteAsync (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrderDeleteAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> OrderDeleteItemAsync (string clientId, string accessToken, string merchantId, string id, string itemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> OrderDeleteItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrderGetAsync (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrderGetAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrderGetByParametersAsync (string clientId, string accessToken, string merchantId, string parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrderGetByParametersAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of OrderItem</returns>
        System.Threading.Tasks.Task<OrderItem> OrderGetItemAsync (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse (OrderItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderItem>> OrderGetItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> OrderGetTransactionsAsync (string clientId, string accessToken, string merchantId, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> OrderGetTransactionsAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar o cancelamento de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OrderUpdateAsync (string clientId, string accessToken, string merchantId, string id, string operation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar o cancelamento de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OrderUpdateAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string operation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> OrderUpdateItemAsync (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> OrderUpdateItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderManagementApi : IOrderManagementApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderManagementApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderManagementApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Response</returns>
        public Response OrderAddItem (string clientId, string accessToken, string merchantId, string id, OrderItem body)
        {
             ApiResponse<Response> localVarResponse = OrderAddItemWithHttpInfo(clientId, accessToken, merchantId, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > OrderAddItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id, OrderItem body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderManagementApi->OrderAddItem");

            var localVarPath = "/orders/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderAddItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> OrderAddItemAsync (string clientId, string accessToken, string merchantId, string id, OrderItem body)
        {
             ApiResponse<Response> localVarResponse = await OrderAddItemAsyncWithHttpInfo(clientId, accessToken, merchantId, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recurso responsável por efetuar a inclusão de um novo item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> OrderAddItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, OrderItem body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderAddItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderManagementApi->OrderAddItem");

            var localVarPath = "/orders/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderAddItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a criação de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>Response</returns>
        public Response OrderCreate (string clientId, string accessToken, string merchantId, Order body)
        {
             ApiResponse<Response> localVarResponse = OrderCreateWithHttpInfo(clientId, accessToken, merchantId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recurso responsável por efetuar a criação de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > OrderCreateWithHttpInfo (string clientId, string accessToken, string merchantId, Order body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderCreate");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderCreate");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderCreate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderManagementApi->OrderCreate");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a criação de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> OrderCreateAsync (string clientId, string accessToken, string merchantId, Order body)
        {
             ApiResponse<Response> localVarResponse = await OrderCreateAsyncWithHttpInfo(clientId, accessToken, merchantId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recurso responsável por efetuar a criação de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> OrderCreateAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, Order body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderCreate");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderCreate");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderCreate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderManagementApi->OrderCreate");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns></returns>
        public void OrderDelete (string clientId, string accessToken, string merchantId, string id)
        {
             OrderDeleteWithHttpInfo(clientId, accessToken, merchantId, id);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrderDeleteWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderDelete");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderDelete");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderDelete");

            var localVarPath = "/orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrderDeleteAsync (string clientId, string accessToken, string merchantId, string id)
        {
             await OrderDeleteAsyncWithHttpInfo(clientId, accessToken, merchantId, id);

        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrderDeleteAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderDelete");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderDelete");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderDelete");

            var localVarPath = "/orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>Response</returns>
        public Response OrderDeleteItem (string clientId, string accessToken, string merchantId, string id, string itemId)
        {
             ApiResponse<Response> localVarResponse = OrderDeleteItemWithHttpInfo(clientId, accessToken, merchantId, id, itemId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > OrderDeleteItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling OrderManagementApi->OrderDeleteItem");

            var localVarPath = "/orders/{id}/items/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderDeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> OrderDeleteItemAsync (string clientId, string accessToken, string merchantId, string id, string itemId)
        {
             ApiResponse<Response> localVarResponse = await OrderDeleteItemAsyncWithHttpInfo(clientId, accessToken, merchantId, id, itemId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recurso responsável por efetuar a exclusão de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> OrderDeleteItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderDeleteItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling OrderManagementApi->OrderDeleteItem");

            var localVarPath = "/orders/{id}/items/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderDeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Order</returns>
        public Order OrderGet (string clientId, string accessToken, string merchantId, string id)
        {
             ApiResponse<Order> localVarResponse = OrderGetWithHttpInfo(clientId, accessToken, merchantId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > OrderGetWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderGet");

            var localVarPath = "/orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrderGetAsync (string clientId, string accessToken, string merchantId, string id)
        {
             ApiResponse<Order> localVarResponse = await OrderGetAsyncWithHttpInfo(clientId, accessToken, merchantId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrderGetAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGet");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderGet");

            var localVarPath = "/orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns></returns>
        public void OrderGetByParameters (string clientId, string accessToken, string merchantId, string parameters)
        {
             OrderGetByParametersWithHttpInfo(clientId, accessToken, merchantId, parameters);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrderGetByParametersWithHttpInfo (string clientId, string accessToken, string merchantId, string parameters)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGetByParameters");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGetByParameters");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGetByParameters");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling OrderManagementApi->OrderGetByParameters");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null) localVarQueryParams.Add("parameters", Configuration.ApiClient.ParameterToString(parameters)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGetByParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrderGetByParametersAsync (string clientId, string accessToken, string merchantId, string parameters)
        {
             await OrderGetByParametersAsyncWithHttpInfo(clientId, accessToken, merchantId, parameters);

        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="parameters">Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrderGetByParametersAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string parameters)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGetByParameters");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGetByParameters");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGetByParameters");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling OrderManagementApi->OrderGetByParameters");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null) localVarQueryParams.Add("parameters", Configuration.ApiClient.ParameterToString(parameters)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGetByParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>OrderItem</returns>
        public OrderItem OrderGetItem (string clientId, string accessToken, string merchantId, string id)
        {
             ApiResponse<OrderItem> localVarResponse = OrderGetItemWithHttpInfo(clientId, accessToken, merchantId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of OrderItem</returns>
        public ApiResponse< OrderItem > OrderGetItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGetItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGetItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGetItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderGetItem");

            var localVarPath = "/orders/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderItem)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of OrderItem</returns>
        public async System.Threading.Tasks.Task<OrderItem> OrderGetItemAsync (string clientId, string accessToken, string merchantId, string id)
        {
             ApiResponse<OrderItem> localVarResponse = await OrderGetItemAsyncWithHttpInfo(clientId, accessToken, merchantId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta de um item em um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse (OrderItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderItem>> OrderGetItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGetItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGetItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGetItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderGetItem");

            var localVarPath = "/orders/{id}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderItem)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Transaction</returns>
        public Transaction OrderGetTransactions (string clientId, string accessToken, string merchantId, string id)
        {
             ApiResponse<Transaction> localVarResponse = OrderGetTransactionsWithHttpInfo(clientId, accessToken, merchantId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > OrderGetTransactionsWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGetTransactions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGetTransactions");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGetTransactions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderGetTransactions");

            var localVarPath = "/orders/{id}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> OrderGetTransactionsAsync (string clientId, string accessToken, string merchantId, string id)
        {
             ApiResponse<Transaction> localVarResponse = await OrderGetTransactionsAsyncWithHttpInfo(clientId, accessToken, merchantId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recurso responsável por efetuar a consulta das transações de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> OrderGetTransactionsAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderGetTransactions");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderGetTransactions");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderGetTransactions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderGetTransactions");

            var localVarPath = "/orders/{id}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar o cancelamento de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns></returns>
        public void OrderUpdate (string clientId, string accessToken, string merchantId, string id, string operation)
        {
             OrderUpdateWithHttpInfo(clientId, accessToken, merchantId, id, operation);
        }

        /// <summary>
        ///  Recurso responsável por efetuar o cancelamento de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OrderUpdateWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string operation)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling OrderManagementApi->OrderUpdate");

            var localVarPath = "/orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operation != null) localVarQueryParams.Add("operation", Configuration.ApiClient.ParameterToString(operation)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recurso responsável por efetuar o cancelamento de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OrderUpdateAsync (string clientId, string accessToken, string merchantId, string id, string operation)
        {
             await OrderUpdateAsyncWithHttpInfo(clientId, accessToken, merchantId, id, operation);

        }

        /// <summary>
        ///  Recurso responsável por efetuar o cancelamento de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="operation">Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OrderUpdateAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string operation)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderUpdate");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling OrderManagementApi->OrderUpdate");

            var localVarPath = "/orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operation != null) localVarQueryParams.Add("operation", Configuration.ApiClient.ParameterToString(operation)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Response</returns>
        public Response OrderUpdateItem (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body)
        {
             ApiResponse<Response> localVarResponse = OrderUpdateItemWithHttpInfo(clientId, accessToken, merchantId, id, itemId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > OrderUpdateItemWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderManagementApi->OrderUpdateItem");

            var localVarPath = "/orders/{id}/items/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }

            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }

            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderUpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> OrderUpdateItemAsync (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body)
        {
             ApiResponse<Response> localVarResponse = await OrderUpdateItemAsyncWithHttpInfo(clientId, accessToken, merchantId, id, itemId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recurso responsável por efetuar a alteração de um item de um pedido.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Token da aplicação (APP Token) gerado durante o processo de cadastro.</param>
        /// <param name="accessToken">Token de acesso (Access Token) gerado durante o processo de cadastro.</param>
        /// <param name="merchantId">Identificador do estabelecimento comercial gerado durante o processo de cadastro.</param>
        /// <param name="id">Identificador do pedido.</param>
        /// <param name="itemId">Identificador do item do pedido.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> OrderUpdateItemAsyncWithHttpInfo (string clientId, string accessToken, string merchantId, string id, string itemId, OrderItem body)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling OrderManagementApi->OrderUpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrderManagementApi->OrderUpdateItem");

            var localVarPath = "/orders/{id}/items/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client-id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access-token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (merchantId != null) localVarHeaderParams.Add("merchant-id", Configuration.ApiClient.ParameterToString(merchantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (merchant-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("merchant-id")))
            {
                localVarHeaderParams["merchant-id"] = Configuration.GetApiKeyWithPrefix("merchant-id");
            }
            // authentication (access-token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access-token")))
            {
                localVarHeaderParams["access-token"] = Configuration.GetApiKeyWithPrefix("access-token");
            }
            // authentication (client-id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client-id")))
            {
                localVarHeaderParams["client-id"] = Configuration.GetApiKeyWithPrefix("client-id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderUpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

    }
}
